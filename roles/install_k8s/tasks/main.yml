---
- name: Install docker
  ansible.builtin.apt:
    name: docker.io
    update_cache: yes
    state: latest
- name: Start docker
  ansible.builtin.systemd:
    state: started
    name: docker
- name: Swap off
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(?!#)(.*swap.*)'
    replace: '#\1'
  register: results
- name: Reboot for swap off
  ansible.builtin.reboot:
    reboot_timeout: 3600
  when: results.changed
- name: Set memory to results
  ansible.builtin.command:
    cmd: free
  changed_when: results['rc'] != 0
  register: results
- name: Check swap is zero
  ansible.builtin.fail:
  loop: '{{ (results.stdout_lines[2] | regex_replace("\s+", " ")).split(" ") }}'
  when: item not in ['Swap:', '0']
- name: Modprove br_netfilter
  ansible.builtin.command:
    cmd: modprobe br_netfilter
  changed_when: results['rc'] != 0
- name: Set bridge-nf-call-iptables to results
  ansible.builtin.command:
    cmd: cat /proc/sys/net/bridge/bridge-nf-call-iptables
  register: results
  changed_when: results['rc'] != 0
- name: Check bridge-nf-call-iptables == 1
  block:
    - name: Copy k8s.conf
      ansible.builtin.copy:
        src: k8s.conf
        dest: /etc/sysctl.d/k8s.conf
    - name: Sysctl reload
      ansible.builtin.command:
        cmd: sysctl --system
    - name: Recheck bridge-nf-call-iptables
      ansible.builtin.command:
        cmd: cat /proc/sys/net/bridge/bridge-nf-call-iptables
      register: results
      failed_when: results.stdout[0] == "0"
  when: results.stdout[0] == "0"
- name: Install apt-transport-https and curl
  ansible.builtin.apt:
    name: "{{ item }}"
  with_items:
    - apt-transport-https
    - curl
- name: Register gpg key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
- name: Check that kubernetes.list exists 
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/kubernetes.list
  register: results
- name: Create kubernetes.list
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: touch
  when: not results.stat.exists
- name: Check line of deb https://apt.kubernetes.io/ kubernetes-xenial main
  ansible.builtin.lineinfile:
    name: /etc/apt/sources.list.d/kubernetes.list
    line: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
  register: results
- name: Install kubelet kubeadm kubectl
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: yes
    allow_downgrade: yes
  with_items:
    - kubelet=1.21.*
    - kubeadm=1.21.*
    - kubectl=1.21.*
- name: Prevent python from being upgraded
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl
- name: Kubedam init 
  block:
    - name: Kube reset 
      ansible.builtin.shell: "kubeadm reset --force"
    - name: Delete ~/.kube/config
      ansible.builtin.file:
        path: "{{ lookup('env', 'USER') }}/.kube/config"
        state: absent
    - name: Kubedam init
      ansible.builtin.shell: kubeadm init --pod-network-cidr=192.168.0.0/16
      register: kube_join 
    - set_fact:
        kube_cmd: '{{ ((kube_join.stdout_lines[(kube_join.stdout_lines | length) - 2]) | regex_replace("^(.+)([\\]+)$", "\1") ) }} {{ kube_join.stdout_lines[(kube_join.stdout_lines | length) - 1] | regex_replace("\t", "") }}'
    - name: Make .kube dir
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.kube"
        state: directory
        owner: "{{ lookup('env', 'USER') }}" 
        group: "{{ lookup('env', 'USER') }}"
    - name: Copy config file
      ansible.builtin.copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "{{ lookup('env', 'HOME') }}/.kube/config"
        remote_src: yes
        owner: "{{ lookup('env', 'USER') }}" 
        group: "{{ lookup('env', 'USER') }}"
  when: "'master' in group_names and kube_master_init" 
- name: Kubeadm join 
  block:
    - name: Kube reset 
      ansible.builtin.shell: "kubeadm reset --force"
    - name: Kube join
      ansible.builtin.shell: "{{ hostvars.control.kube_cmd }}"
  when: "'worker' in group_names and kube_worker_join" 
- name: Download Calico
  ansible.builtin.shell: curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
  when: "'master' in group_names and kube_master_init" 
- name: Apply Calico
  ansible.builtin.shell: kubectl apply -f calico.yaml
  when: "'master' in group_names and kube_master_init" 
  become: yes
  become_user: murakami
- name: Set up Istio
  block:
    - name: Download Istio
      ansible.builtin.shell: curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{istio_version}} sh -
      become: yes
      become_user: murakami
    - name: Copy istioctl
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') }}/istio-{{istio_version}}/bin/istioctl"
        dest: "/usr/local/bin"
        remote_src: yes
        owner: "{{ lookup('env', 'USER') }}" 
        group: "{{ lookup('env', 'USER') }}"
        mode: "0744"
    - name: Install Istio (demo profile)
      ansible.builtin.command:
        cmd: istioctl install --set profile=demo -y
      become: yes
      become_user: murakami
    - name: Add namespace
      ansible.builtin.command:
        cmd: kubectl label namespace default istio-injection=enabled
      become: yes
      become_user: murakami
  when: "'master' in group_names" 